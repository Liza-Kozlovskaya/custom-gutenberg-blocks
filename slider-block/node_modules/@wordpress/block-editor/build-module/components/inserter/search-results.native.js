import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { FlatList, View, TouchableHighlight, TouchableWithoutFeedback, Dimensions } from 'react-native';
/**
 * WordPress dependencies
 */

import { useState, useEffect } from '@wordpress/element';
import { BottomSheet, BottomSheetConsumer, InserterButton } from '@wordpress/components';
/**
 * Internal dependencies
 */

import styles from './style.scss';
var MIN_COL_NUM = 3;

function InserterSearchResults(_ref) {
  var items = _ref.items,
      onSelect = _ref.onSelect,
      onClose = _ref.onClose;

  var _useState = useState(MIN_COL_NUM),
      _useState2 = _slicedToArray(_useState, 2),
      numberOfColumns = _useState2[0],
      setNumberOfColumns = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      itemWidth = _useState4[0],
      setItemWidth = _useState4[1];

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      maxWidth = _useState6[0],
      setMaxWidth = _useState6[1];

  useEffect(function () {
    Dimensions.addEventListener('change', onLayout);
    return function () {
      Dimensions.removeEventListener('change', onLayout);
    };
  }, []);

  function calculateItemWidth() {
    var _InserterButton$Style = InserterButton.Styles.modalItem,
        itemPaddingLeft = _InserterButton$Style.paddingLeft,
        itemPaddingRight = _InserterButton$Style.paddingRight;
    var width = InserterButton.Styles.modalIconWrapper.width;
    return width + itemPaddingLeft + itemPaddingRight;
  }

  function onLayout() {
    var sumLeftRightPadding = styles.columnPadding.paddingLeft + styles.columnPadding.paddingRight;
    var bottomSheetWidth = BottomSheet.getWidth();
    var containerTotalWidth = bottomSheetWidth - sumLeftRightPadding;
    var itemTotalWidth = calculateItemWidth();
    var columnsFitToWidth = Math.floor(containerTotalWidth / itemTotalWidth);
    var numColumns = Math.max(MIN_COL_NUM, columnsFitToWidth);
    setNumberOfColumns(numColumns);
    setMaxWidth(containerTotalWidth / numColumns);

    if (columnsFitToWidth < MIN_COL_NUM) {
      var updatedItemWidth = (bottomSheetWidth - 2 * sumLeftRightPadding) / MIN_COL_NUM;
      setItemWidth(updatedItemWidth);
    }
  }

  return createElement(BottomSheet, {
    isVisible: true,
    onClose: onClose,
    hideHeader: true,
    hasNavigation: true
  }, createElement(TouchableHighlight, {
    accessible: false
  }, createElement(BottomSheetConsumer, null, function (_ref2) {
    var listProps = _ref2.listProps,
        safeAreaBottomInset = _ref2.safeAreaBottomInset;
    return createElement(FlatList, _extends({
      onLayout: onLayout,
      key: "InserterUI-".concat(numberOfColumns) //re-render when numberOfColumns changes
      ,
      keyboardShouldPersistTaps: "always",
      numColumns: numberOfColumns,
      data: items,
      ItemSeparatorComponent: function ItemSeparatorComponent() {
        return createElement(TouchableWithoutFeedback, {
          accessible: false
        }, createElement(View, {
          style: styles.rowSeparator
        }));
      },
      keyExtractor: function keyExtractor(item) {
        return item.name;
      },
      renderItem: function renderItem(_ref3) {
        var item = _ref3.item;
        return createElement(InserterButton, {
          item: item,
          itemWidth: itemWidth,
          maxWidth: maxWidth,
          onSelect: onSelect
        });
      }
    }, listProps, {
      contentContainerStyle: [].concat(_toConsumableArray(listProps.contentContainerStyle), [{
        paddingBottom: safeAreaBottomInset || styles.list.paddingBottom
      }])
    }));
  })));
}

export default InserterSearchResults;
//# sourceMappingURL=search-results.native.js.map